package com.sunmi.pocketvendor;

import android.app.Application;
import android.os.Handler;
import android.os.Looper;
import android.os.RemoteException;

import com.sunmi.pay.hardware.aidl.AidlConstants;

import com.sunmi.pay.hardware.aidl.bean.EmvTermParam;
import com.sunmi.pay.hardware.aidl.emv.EMVOpt;
import com.sunmi.pay.hardware.aidl.pinpad.PinPadOpt;
import com.sunmi.pay.hardware.aidl.readcard.ReadCardOpt;
import com.sunmi.pay.hardware.aidl.security.SecurityOpt;
import com.sunmi.pay.hardware.aidl.system.BasicOpt;
import com.sunmi.pocketvendor.utils.Utils;

import java.util.ArrayList;
import java.util.List;

import sunmi.sunmiui.utils.LogUtil;


public class pvApplication extends Application {

	public static pvApplication PVapplication;
	public static pvApplication getInstance(){
		return PVapplication;
	}
	private Handler mainHandler = new Handler(Looper.getMainLooper());

	public void post(Runnable run) {
		mainHandler.post(run);
	}
	public static int pikIndex = 14;

	// Sunmi card scan and misc.
	//public static SunmiPayKernel mSunmiPayKernel;
	public static PinPadOpt mPinPadOpt;
	public static BasicOpt mBasicOpt;
	public static ReadCardOpt mReadCardOpt;
	public static EMVOpt mEMVOpt;
	public static SecurityOpt mSecurityOpt;
	public static final String TAG = "pvApplication";

	@Override
	public void onCreate() {
		super.onCreate();
		PVapplication = this;
	}

//	public static int KEKIndex = 89;
//	public static int TMKIndex = 49;
//	public static int PIKIndex = 59;
//	public static int MAKIndex = 69;
//	public static int TDKIndex = 79;


	/**
	 * Store KEK, TMK, PIK, MAL, TDL, various default key
	 *
	 * @throws RemoteException
	 */
	public static void initSecretKey() throws RemoteException {
//		byte[] KEK = {(byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33,
//				(byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33};
//		byte[] eTMK = Utils.hexStr2Bytes("B784118946137E571C9DA668C2D790E2");
//		byte[] workKey = {(byte) 0x31, (byte) 0x31, (byte) 0x31, (byte) 0x31, (byte) 0x31, (byte) 0x31, (byte) 0x31,
//				(byte) 0x31, (byte) 0x31, (byte) 0x31, (byte) 0x31, (byte) 0x31, (byte) 0x31, (byte) 0x31, (byte) 0x31, (byte) 0x31};
//
//
//		/**
//		 * Check Value calculation process：
//		 KEK（Clear Text） TMK（Ciphertext） workKey（Ciphertext）
//		 KEK decrypt TMK(ciphertext) get TMK（plaintext）
//		 Use TMK（clear1 text）to decrypt workKey（ciphertext）to get workKey（plaintext）
//		 Use workKey（plaintext）too inecrpy 16 0s  to take the first 8 bits to be CheckValue
//		 */
//		byte[] checkValue = StringByteUtils.HexString2Bytes("E4C1C714");
//		//测试时请将主密钥和工作密钥存入以下索引
//		// KEK 81
//		int mKEKResult = mPinPadOpt.loadKEK(KEKIndex, KEK);
//		Log.i(TAG, "mKEKResult:" + mKEKResult);
//		// TMK 41
//		int mTMKResult = mPinPadOpt.loadTMK(TMKIndex, 3, KEKIndex, eTMK);
//		Log.i(TAG, "mTMKResult:" + mTMKResult);
//		// PIK 51
//		int mPIKResult = mPinPadOpt.loadPIK(PIKIndex, 3, TMKIndex, workKey, checkValue);
//		Log.i(TAG, "mPIKResult:" + mPIKResult);
//		// MAK 61
//		int mMAKResult = mPinPadOpt.loadWKEY(MAKIndex, 3, TMKIndex, workKey, checkValue);
//		Log.i(TAG, "mMAKResult:" + mMAKResult);
//		// TDK 71
//		int mTDKResult = mPinPadOpt.loadWKEY(TDKIndex, 3, TMKIndex, workKey, checkValue);
//		Log.i(TAG, "mTDKResult:" + mTDKResult);

		// new P1N-G
		byte[] kekByte = Utils.hexStr2Bytes("11111111111111111111111111111111");
		byte[] tmkByte = Utils.hexStr2Bytes("F40379AB9E0EC533F40379AB9E0EC533");
		byte[] checkValueByte = Utils.hexStr2Bytes("82E13665B4624DF5");

		/**
		 * CheckValue的计算过程：
		 KEK（明文） TMK（密文） workKey（密文）
		 KEK解密TMK(密文)得到TMK（明文）
		 用TMK（明文）解密workKey（密文）得到workKey（明文）
		 用workKey（明文）加密16个0 取前8位是CheckValue
		 */
		//测试时请将主密钥和工作密钥存入以下索引
		try {
			int rec = mSecurityOpt.saveKey(AidlConstants.Security.KEY_TYPE_KEK, kekByte, checkValueByte, 1, AidlConstants.Security.KEY_ALG_TYPE_3DES, 10, false);
			int rec1 = mSecurityOpt.saveKey(AidlConstants.Security.KEY_TYPE_TMK, tmkByte, checkValueByte, 10, AidlConstants.Security.KEY_ALG_TYPE_3DES, 11, true);
			int rec2 = mSecurityOpt.saveKey(AidlConstants.Security.KEY_TYPE_TDK, tmkByte, checkValueByte, 11, AidlConstants.Security.KEY_ALG_TYPE_3DES, 12, true);
			int rec3 = mSecurityOpt.saveKey(AidlConstants.Security.KEY_TYPE_MAK, tmkByte, checkValueByte, 11, AidlConstants.Security.KEY_ALG_TYPE_3DES, 13, true);
			int rec4 = mSecurityOpt.saveKey(AidlConstants.Security.KEY_TYPE_PIK, tmkByte, checkValueByte, 11, AidlConstants.Security.KEY_ALG_TYPE_3DES, pikIndex, true);
			LogUtil.e("secutirysaveKey", rec + ":" + rec1 + ":" + rec2 + ":" + rec3 + ":" + rec4);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Load aid and capk
	 */
	public static void loadaidcapk() {
		try {
//			// set the default
//			mEMVOpt.updateAID(AidlConstants.EMV.AID.ACTION_AID_ADD, "9F0608A000000333010101DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B040000C350DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06100000000000DF1906100000000000DF2006100000000000DF2106100000000000");
//			mEMVOpt.updateAID(AidlConstants.EMV.AID.ACTION_AID_ADD, "9F0608A000000333010102DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B040000C350DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06100000000000DF1906100000000000DF2006100000000000DF2106100000000000");
//			mEMVOpt.updateAID(AidlConstants.EMV.AID.ACTION_AID_ADD, "9F0608A000000333010103DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B040000C350DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06100000000000DF1906100000000000DF2006100000000000DF2106100000000000");
//			mEMVOpt.updateAID(AidlConstants.EMV.AID.ACTION_AID_ADD, "9F0608A000000333010106DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B040000C350DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06100000000000DF1906100000000000DF2006100000000000DF2106100000000000");
//
//			//Set the default RID list CAPK
//			mEMVOpt.updateCAPK(AidlConstants.EMV.CAPK.ACTION_CAPK_ADD, "9F0605A0000003339F220104DF05083230323531323331DF060101DF070101DF0281F8BC853E6B5365E89E7EE9317C94B02D0ABB0DBD91C05A224A2554AA29ED9FCB9D86EB9CCBB322A57811F86188AAC7351C72BD9EF196C5A01ACEF7A4EB0D2AD63D9E6AC2E7836547CB1595C68BCBAFD0F6728760F3A7CA7B97301B7E0220184EFC4F653008D93CE098C0D93B45201096D1ADFF4CF1F9FC02AF759DA27CD6DFD6D789B099F16F378B6100334E63F3D35F3251A5EC78693731F5233519CDB380F5AB8C0F02728E91D469ABD0EAE0D93B1CC66CE127B29C7D77441A49D09FCA5D6D9762FC74C31BB506C8BAE3C79AD6C2578775B95956B5370D1D0519E37906B384736233251E8F09AD79DFBE2C6ABFADAC8E4D8624318C27DAF1DF040103DF0314F527081CF371DD7E1FD4FA414A665036E0F5E6E5");
//			mEMVOpt.updateCAPK(AidlConstants.EMV.CAPK.ACTION_CAPK_ADD, "9F0605A0000003339F220103DF05083230323431323331DF060101DF070101DF0281B0B0627DEE87864F9C18C13B9A1F025448BF13C58380C91F4CEBA9F9BCB214FF8414E9B59D6ABA10F941C7331768F47B2127907D857FA39AAF8CE02045DD01619D689EE731C551159BE7EB2D51A372FF56B556E5CB2FDE36E23073A44CA215D6C26CA68847B388E39520E0026E62294B557D6470440CA0AEFC9438C923AEC9B2098D6D3A1AF5E8B1DE36F4B53040109D89B77CAFAF70C26C601ABDF59EEC0FDC8A99089140CD2E817E335175B03B7AA33DDF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26");
//			mEMVOpt.updateCAPK(AidlConstants.EMV.CAPK.ACTION_CAPK_ADD, "9F0605A0000003339F220102DF05083230323131323331DF060101DF070101DF028190A3767ABD1B6AA69D7F3FBF28C092DE9ED1E658BA5F0909AF7A1CCD907373B7210FDEB16287BA8E78E1529F443976FD27F991EC67D95E5F4E96B127CAB2396A94D6E45CDA44CA4C4867570D6B07542F8D4BF9FF97975DB9891515E66F525D2B3CBEB6D662BFB6C3F338E93B02142BFC44173A3764C56AADD202075B26DC2F9F7D7AE74BD7D00FD05EE430032663D27A57DF040103DF031403BB335A8549A03B87AB089D006F60852E4B8060");
//			mEMVOpt.updateCAPK(AidlConstants.EMV.CAPK.ACTION_CAPK_ADD, "9F0605A0000003339F220101DF05083230313431323331DF060101DF070101DF028180BBE9066D2517511D239C7BFA77884144AE20C7372F515147E8CE6537C54C0A6A4D45F8CA4D290870CDA59F1344EF71D17D3F35D92F3F06778D0D511EC2A7DC4FFEADF4FB1253CE37A7B2B5A3741227BEF72524DA7A2B7B1CB426BEE27BC513B0CB11AB99BC1BC61DF5AC6CC4D831D0848788CD74F6D543AD37C5A2B4C5D5A93BDF040103DF0314E881E390675D44C2DD81234DCE29C3F5AB2297A0");
//
			//先清空AID、RID
			mEMVOpt.updateAID(AidlConstants.EMV.AID.ACTION_AID_DEL, "");
			mEMVOpt.updateCAPK(AidlConstants.EMV.CAPK.ACTION_CAPK_DEL, "");

//            //设置默认AID
//            mEMVOpt.updateAID(AidlConstants.EMV.AID.ACTION_AID_ADD, "9F0608A000000333010101DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B040000C350DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06100000000000DF1906100000000000DF2006100000000000DF2106100000000000");
//            mEMVOpt.updateAID(AidlConstants.EMV.AID.ACTION_AID_ADD, "9F0608A000000333010102DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B040000C350DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06100000000000DF1906100000000000DF2006100000000000DF2106100000000000");
//            mEMVOpt.updateAID(AidlConstants.EMV.AID.ACTION_AID_ADD, "9F0608A000000333010103DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B040000C350DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06100000000000DF1906100000000000DF2006100000000000DF2106100000000000");
//            mEMVOpt.updateAID(AidlConstants.EMV.AID.ACTION_AID_ADD, "9F0608A000000333010106DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B040000C350DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06100000000000DF1906100000000000DF2006100000000000DF2106100000000000");
//            //设置默认RID列表CAPK
//            mEMVOpt.updateCAPK(AidlConstants.EMV.CAPK.ACTION_CAPK_ADD, "9F0605A0000003339F220104DF05083230323531323331DF060101DF070101DF0281F8BC853E6B5365E89E7EE9317C94B02D0ABB0DBD91C05A224A2554AA29ED9FCB9D86EB9CCBB322A57811F86188AAC7351C72BD9EF196C5A01ACEF7A4EB0D2AD63D9E6AC2E7836547CB1595C68BCBAFD0F6728760F3A7CA7B97301B7E0220184EFC4F653008D93CE098C0D93B45201096D1ADFF4CF1F9FC02AF759DA27CD6DFD6D789B099F16F378B6100334E63F3D35F3251A5EC78693731F5233519CDB380F5AB8C0F02728E91D469ABD0EAE0D93B1CC66CE127B29C7D77441A49D09FCA5D6D9762FC74C31BB506C8BAE3C79AD6C2578775B95956B5370D1D0519E37906B384736233251E8F09AD79DFBE2C6ABFADAC8E4D8624318C27DAF1DF040103DF0314F527081CF371DD7E1FD4FA414A665036E0F5E6E5");
//            mEMVOpt.updateCAPK(AidlConstants.EMV.CAPK.ACTION_CAPK_ADD, "9F0605A0000003339F220103DF05083230323431323331DF060101DF070101DF0281B0B0627DEE87864F9C18C13B9A1F025448BF13C58380C91F4CEBA9F9BCB214FF8414E9B59D6ABA10F941C7331768F47B2127907D857FA39AAF8CE02045DD01619D689EE731C551159BE7EB2D51A372FF56B556E5CB2FDE36E23073A44CA215D6C26CA68847B388E39520E0026E62294B557D6470440CA0AEFC9438C923AEC9B2098D6D3A1AF5E8B1DE36F4B53040109D89B77CAFAF70C26C601ABDF59EEC0FDC8A99089140CD2E817E335175B03B7AA33DDF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26");
//            mEMVOpt.updateCAPK(AidlConstants.EMV.CAPK.ACTION_CAPK_ADD, "9F0605A0000003339F220102DF05083230323131323331DF060101DF070101DF028190A3767ABD1B6AA69D7F3FBF28C092DE9ED1E658BA5F0909AF7A1CCD907373B7210FDEB16287BA8E78E1529F443976FD27F991EC67D95E5F4E96B127CAB2396A94D6E45CDA44CA4C4867570D6B07542F8D4BF9FF97975DB9891515E66F525D2B3CBEB6D662BFB6C3F338E93B02142BFC44173A3764C56AADD202075B26DC2F9F7D7AE74BD7D00FD05EE430032663D27A57DF040103DF031403BB335A8549A03B87AB089D006F60852E4B8060");
//            mEMVOpt.updateCAPK(AidlConstants.EMV.CAPK.ACTION_CAPK_ADD, "9F0605A0000003339F220101DF05083230313431323331DF060101DF070101DF028180BBE9066D2517511D239C7BFA77884144AE20C7372F515147E8CE6537C54C0A6A4D45F8CA4D290870CDA59F1344EF71D17D3F35D92F3F06778D0D511EC2A7DC4FFEADF4FB1253CE37A7B2B5A3741227BEF72524DA7A2B7B1CB426BEE27BC513B0CB11AB99BC1BC61DF5AC6CC4D831D0848788CD74F6D543AD37C5A2B4C5D5A93BDF040103DF0314E881E390675D44C2DD81234DCE29C3F5AB2297A0");
			//设置终端参数
			mEMVOpt.setTerminalParam(new EmvTermParam());

			//使用该接口效率更高
			List<String> aidList = new ArrayList<>();
			aidList.add("9F0608A000000333010101DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B040000C350DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06100000000000DF1906100000000000DF2006100000000000DF2106100000000000");
			aidList.add("9F0608A000000333010102DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B040000C350DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06100000000000DF1906100000000000DF2006100000000000DF2106100000000000");
			aidList.add("9F0608A000000333010103DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B040000C350DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06100000000000DF1906100000000000DF2006100000000000DF2106100000000000");
			aidList.add("9F0608A000000333010106DF0101009F08020020DF1105D84000A800DF1205D84004F800DF130500100000009F1B040000C350DF150400000000DF160199DF170199DF14039F3704DF1801019F7B06100000000000DF1906100000000000DF2006100000000000DF2106100000000000");
			mEMVOpt.insertAID(aidList);

			//使用该接口效率更高
			List<String> capkList = new ArrayList<>();
			capkList.add("9F0605A0000003339F220104DF05083230323531323331DF060101DF070101DF0281F8BC853E6B5365E89E7EE9317C94B02D0ABB0DBD91C05A224A2554AA29ED9FCB9D86EB9CCBB322A57811F86188AAC7351C72BD9EF196C5A01ACEF7A4EB0D2AD63D9E6AC2E7836547CB1595C68BCBAFD0F6728760F3A7CA7B97301B7E0220184EFC4F653008D93CE098C0D93B45201096D1ADFF4CF1F9FC02AF759DA27CD6DFD6D789B099F16F378B6100334E63F3D35F3251A5EC78693731F5233519CDB380F5AB8C0F02728E91D469ABD0EAE0D93B1CC66CE127B29C7D77441A49D09FCA5D6D9762FC74C31BB506C8BAE3C79AD6C2578775B95956B5370D1D0519E37906B384736233251E8F09AD79DFBE2C6ABFADAC8E4D8624318C27DAF1DF040103DF0314F527081CF371DD7E1FD4FA414A665036E0F5E6E5");
			capkList.add("9F0605A0000003339F220103DF05083230323431323331DF060101DF070101DF0281B0B0627DEE87864F9C18C13B9A1F025448BF13C58380C91F4CEBA9F9BCB214FF8414E9B59D6ABA10F941C7331768F47B2127907D857FA39AAF8CE02045DD01619D689EE731C551159BE7EB2D51A372FF56B556E5CB2FDE36E23073A44CA215D6C26CA68847B388E39520E0026E62294B557D6470440CA0AEFC9438C923AEC9B2098D6D3A1AF5E8B1DE36F4B53040109D89B77CAFAF70C26C601ABDF59EEC0FDC8A99089140CD2E817E335175B03B7AA33DDF040103DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26");
			capkList.add("9F0605A0000003339F220102DF05083230323131323331DF060101DF070101DF028190A3767ABD1B6AA69D7F3FBF28C092DE9ED1E658BA5F0909AF7A1CCD907373B7210FDEB16287BA8E78E1529F443976FD27F991EC67D95E5F4E96B127CAB2396A94D6E45CDA44CA4C4867570D6B07542F8D4BF9FF97975DB9891515E66F525D2B3CBEB6D662BFB6C3F338E93B02142BFC44173A3764C56AADD202075B26DC2F9F7D7AE74BD7D00FD05EE430032663D27A57DF040103DF031403BB335A8549A03B87AB089D006F60852E4B8060");
			capkList.add("9F0605A0000003339F220101DF05083230313431323331DF060101DF070101DF028180BBE9066D2517511D239C7BFA77884144AE20C7372F515147E8CE6537C54C0A6A4D45F8CA4D290870CDA59F1344EF71D17D3F35D92F3F06778D0D511EC2A7DC4FFEADF4FB1253CE37A7B2B5A3741227BEF72524DA7A2B7B1CB426BEE27BC513B0CB11AB99BC1BC61DF5AC6CC4D831D0848788CD74F6D543AD37C5A2B4C5D5A93BDF040103DF0314E881E390675D44C2DD81234DCE29C3F5AB2297A0");


			mEMVOpt.insertCAPK(capkList);

			//调用同步函数
			mEMVOpt.syncParam();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
